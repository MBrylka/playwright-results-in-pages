name: Playwright Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      
      - name: Run Playwright tests
        run: npx playwright test --trace on-first-retry
      
      - name: Prepare report for publish
        run: |
          mkdir -p reports/${{ github.run_number }}
          cp -r playwright-report/* reports/${{ github.run_number }}/
          cp playwright-report/report.json reports/${{ github.run_number }}/report.json

      - name: Upload report for later job
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: reports

  publish:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download HTML report from test job
        uses: actions/download-artifact@v4
        with:
          name: playwright-report
          path: new-reports

      - name: Clone existing gh-pages branch
        run: |
          git clone --branch gh-pages https://github.com/${{ github.repository }} gh-pages
          mkdir -p gh-pages/reports
          cp -r new-reports/* gh-pages/reports/

      - name: Parse Playwright JSON to get stats
        id: stats
        run: |
          REPORT_JSON="new-reports/${{ github.run_number }}/report.json"
          PASSED=$(jq '[.suites[].specs[].tests[] | select(.results[].status=="passed")] | length' "$REPORT_JSON")
          FAILED=$(jq '[.suites[].specs[].tests[] | select(.results[].status=="failed")] | length' "$REPORT_JSON")
          TOTAL=$(jq '[.suites[].specs[].tests[]] | length' "$REPORT_JSON")
          echo "passed=$PASSED" >> $GITHUB_OUTPUT
          echo "failed=$FAILED" >> $GITHUB_OUTPUT
          echo "total=$TOTAL" >> $GITHUB_OUTPUT

      - name: Update Jekyll data file
        run: |
          cd gh-pages
          mkdir -p _data
          echo "- run: ${{ github.run_number }}
            date: $(date +'%Y-%m-%d %H:%M:%S')
            passed: ${{ steps.stats.outputs.passed }}
            failed: ${{ steps.stats.outputs.failed }}
            total: ${{ steps.stats.outputs.total }}
            link: /reports/${{ github.run_number }}/index.html" >> _data/runs.yml

      - name: Ensure Jekyll config exists
        run: |
          cd gh-pages
          if [ ! -f _config.yml ]; then
            echo "title: Playwright Reports" > _config.yml
            echo "theme: minima" >> _config.yml
          fi
          if [ ! -f index.md ]; then
cat <<'EOF' > index.md
---
layout: default
title: Playwright Reports
---

# Playwright Test Reports

<table>
  <thead>
    <tr>
      <th>Date</th>
      <th>Passed</th>
      <th>Failed</th>
      <th>Total</th>
      <th>Link</th>
    </tr>
  </thead>
  <tbody>
  {% for run in site.data.runs reversed %}
    <tr {% if run.failed > 0 %}style="background-color:#ffe5e5"{% endif %}>
      <td>{{ run.date }}</td>
      <td style="color:green">{{ run.passed }}</td>
      <td style="color:red">{{ run.failed }}</td>
      <td>{{ run.total }}</td>
      <td><a href="{{ run.link }}">Run #{{ run.run }}</a></td>
    </tr>
  {% endfor %}
  </tbody>
</table>
EOF
          fi

      - name: Commit and push to gh-pages
        run: |
          cd gh-pages
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "Add Playwright report for run ${{ github.run_number }}" || echo "No changes to commit"
          git push origin gh-pages
